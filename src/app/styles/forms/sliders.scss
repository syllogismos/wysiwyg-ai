@import "../variables";

/**
http://codepen.io/fxm90/pen/qObMQE
 * Cross browser "<input type="range" />" reset
 * Source: https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/
 */
input[type="range"] {
  -webkit-appearance: none;

  /* Hides the slider so that custom slider can be made */
  width: 100%;

  /* Specific width is required for Firefox. */
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
  }

  &:focus {
    outline: none;

    /* Removes the blue border. */
    border: 0;
  }

  &::-ms-track {
    width: 100%;
    cursor: pointer;
    background: transparent;

    /* Hides the slider so custom styles can be added */
    border-color: transparent;
    color: transparent;
  }
}

/**
 * You can't comma-separate the browser specific selectors, therefore we use a mixin.
 */
@mixin getTrackStyles($browser, $background) {
  &::#{$browser} {
    height: .35rem;
    margin: .875rem 0;

    // (2rem - .25rem) / 2
    background: darken($background, 10%);
    border: none;
  }
}

@mixin getThumbStyles($browser, $color) {
  &::#{$browser} {
    height: 1rem;
    width: 1rem;
    border: 0.25rem solid $color;
    border-radius: 50%;
    background: $color;
    cursor: pointer;
    transition: all .3s;
    @content;
  }

  &:focus::#{$browser} {
    background: $color;

    /** Workaround for semi transparent border. */
    border-width: 0;
    box-shadow: 0px 0px 0px 0.5rem transparentize($color, 0.5);
  }
}

@each $key, $value in $default-palette {
  [data-background="#{$key}"] {
    input[type="range"] {
      background: transparent;

      @include getTrackStyles("-webkit-slider-runnable-track", map-get($value, "border-color"));

      @include getTrackStyles("-moz-range-track", map-get($value, "border-color"));

      @include getTrackStyles("-ms-track", map-get($value, "border-color"));

      @each $key, $value in $bootstrap-colors {
        &.input-range-#{$key} {
          @include getThumbStyles("-webkit-slider-thumb", $value) {
            position: relative;
            top: 50%;
            transform: translateY(-50%);
          }

          @include getThumbStyles("-moz-range-thumb", $value) {
            box-sizing: border-box;
          }

          @include getThumbStyles("-ms-thumb", $value) {
            box-sizing: border-box;
            transform: translateY(calc(.5rem - 50%));
          }
        }
      }
    }
  }
}

.noUi-target,
.noUi-target * {
  -webkit-touch-callout: none;
  -ms-touch-action: none;
  user-select: none;
  box-sizing: border-box;
}

.noUi-base {
  width: 100%;
  height: 100%;
  position: relative;
}

.noUi-origin {
  position: absolute;
  right: 0;
  top: 0;
  left: 0;
  bottom: 0;
}

.noUi-handle {
  position: relative;
  z-index: 1;
  box-sizing: border-box;
}

.noUi-stacking .noUi-handle {
  z-index: 10;
}

.noUi-stacking + .noUi-origin {
  *z-index: -1;
}

.noUi-handle:after,
.noUi-handle:before {
  display: none;
}

.noUi-state-tap .noUi-origin {
  transition: left 0.3s, top 0.3s;
}

.noUi-state-drag * {
  cursor: inherit;
}

.noUi-horizontal {
  height: 10px;
}

.noUi-horizontal .noUi-handle {
  box-sizing: border-box;
  width: 14px;
  height: 14px;
  left: -10px;
  top: -6px;
}

.noUi-horizontal.noUi-extended {
  padding: 0 15px;
}

.noUi-horizontal.noUi-extended .noUi-origin {
  right: -15px;
}

.noUi-background {
  height: 2px;
  margin: 20px 0;
}

.noUi-origin {
  margin: -1px 0 0 0;
  border-radius: 0;
  height: 2px;

  &[style^="left: 0"] .noUi-handle {
    &.noUi-active {
      border-width: 1px;
    }
  }
}

.noUi-target {
  border-radius: 2px;
}

.noUi-handle {
  border-radius: 100%;
  cursor: default;
  transition: all 0.2s ease-out;
  border: 1px solid;
}

.noUi-horizontal {
  height: 2px;
  margin: 15px 0;
}

.noUi-horizontal .noUi-handle.noUi-active {
  transform: scale(2);
}

[disabled].noUi-slider {
  opacity: 0.5;
}

[disabled] .noUi-handle {
  cursor: not-allowed;
}

@each $key, $value in $bootstrap-colors {
  .slider-#{$key} {
    .noUi-connect,
    .noUi-background,
    .noUi-base,
    .noUi-target,
    .noUi-handle {
      box-shadow: none;
      border-color: none;
      background-color: none;
      color: none;
    }

    .noUi-connect {
      background-color: $value;
      border-color: $value;
    }

    .noUi-handle {
      background-color: lighten($value, 5);
      border-color: lighten($value, 5);
    }

    .noUi-background {
      background-color: lighten($value, 20);
      border-color: lighten($value, 20);
    }

    .noUi-base {
      background-color: lighten($value, 20);
      border-color: lighten($value, 20);
    }
  }
}

@each $key, $value in $default-palette {
  [data-background="#{$key}"] {
    .noUi-origin {
      background: map-get($value, "border-color");

      &[style^="left: 0"] .noUi-handle {
        background-color: map-get($value, "background-color");
        border: 2px solid map-get($value, "border-color");
      }
    }

    .noUi-target {
      border: 3px solid darken(map-get($value, "border-color"), 10%);
    }

    .slider {
      background-color: map-get($value, "background-color");
    }
  }
}
